<<<<<<< HEAD
=======
p_nee_day <- ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date", y = "Net ecosystem exchange (g C m^-2 day^-1)") +
theme(
axis.title.y = element_markdown()
)
library(patchwork)
# make one of both plots side by side
p_terr_day <- p_le_day + p_nee_day
p_nee_day <- ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date", y = "Net ecosystem exchange (g C m^-2 day^-1)") +
theme(
axis.title.y = element_markdown()
)
p_le_day <- ggplot() +
geom_point(data = le_day,
>>>>>>> refs/remotes/origin/main
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
<<<<<<< HEAD
ggthemes::theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^{-2})") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
ggthemes::theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
ggthemes::theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 275))
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
ggthemes::theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
ggplot() +
=======
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
# make one of both plots side by side
p_terr_day <- p_le_day + p_nee_day
p_terr_day
library(ggtext)
p_le_day <- ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = ggtext::element_markdown()
) +
ylim(c(-10, 250))
p_le_day
p_le_day <- ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^{-2})") +
theme(
axis.title.y = ggtext::element_markdown()
) +
ylim(c(-10, 250))
p_le_day
p_le_day <- ggplot() +
>>>>>>> refs/remotes/origin/main
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
<<<<<<< HEAD
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
library(readr)
library(here)
library(tidyr)
library(ggplot2)
library(magrittr)
library(ggtext)
# going to go through the process once iwth one of the datasets, so for now I'll
# just ues terrestrial-daily, for no particular reason
terr_day <- readr::read_csv(
here::here("./data/efi-neon-data/terrestrial-daily.csv")
)
# going to go through the process once iwth one of the datasets, so for now I'll
# just ues terrestrial-daily, for no particular reason
terr_day <- readr::read_csv(
here::here("./data/efi-neon-data/terrerstrial-daily.csv")
)
names(terr_day)
unique(terr_day$variable)
# currently in long format, so going to pivot to a wide format
terr_day_wide <- tidyr::pivot_wider(
data = terr_day,
names_from = variable,
values_from = observation
)
# look at the mean values per datetime ob
avg_terr_day = terr_day %>%
dplyr::group_by(datetime, variable) %>%
dplyr::summarize(mean_obs = mean(observation, na.rm = TRUE))
# plot the variable of interest through time
ggplot2::ggplot(data = terr_day) +
geom_point(aes(x = datetime, y = observation, fill = variable),
shape = 21, alpha = 0.02) +
geom_line(data = avg_terr_day,
aes(x = datetime, y = mean_obs, colour = variable)) +
ggthemes::theme_base()
# let's just do one plot at a time so we can see what's going on
le_day <- terr_day %>%
dplyr::filter(variable == "le") %>%
dplyr::mutate(le = observation) %>%
dplyr::select(-variable)
le_avg_day <- le_day %>%
dplyr::group_by(datetime) %>%
dplyr::summarize(mean_le = mean(le, na.rm = TRUE))
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
source("~/Github/predictability/R/functions_global.R", echo=TRUE)
names(terr_day)
unique(terr_day$variable)
# currently in long format, so going to pivot to a wide format
terr_day_wide <- tidyr::pivot_wider(
data = terr_day,
names_from = variable,
values_from = observation
)
# look at the mean values per datetime ob
avg_terr_day = terr_day %>%
dplyr::group_by(datetime, variable) %>%
dplyr::summarize(mean_obs = mean(observation, na.rm = TRUE))
# plot the variable of interest through time
ggplot2::ggplot(data = terr_day) +
geom_point(aes(x = datetime, y = observation, fill = variable),
shape = 21, alpha = 0.02) +
geom_line(data = avg_terr_day,
aes(x = datetime, y = mean_obs, colour = variable)) +
ggthemes::theme_base()
# let's just do one plot at a time so we can see what's going on
le_day <- terr_day %>%
dplyr::filter(variable == "le") %>%
dplyr::mutate(le = observation) %>%
dplyr::select(-variable)
le_avg_day <- le_day %>%
dplyr::group_by(datetime) %>%
dplyr::summarize(mean_le = mean(le, na.rm = TRUE))
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
#' Theme Base
#'
#' Theme similar to the default settings of the \sQuote{base} R graphics.
#'
#' @inheritParams ggplot2::theme_bw
#' @export
#' @family themes
#' @example inst/examples/ex-theme_base.R
theme_base <- function(base_size = 16, base_family = "") {
theme_foundation() +
theme(line = element_line(colour = "black",
lineend = "round",
linetype = "solid"),
rect = element_rect(fill = "white",
colour = "black",
linetype = "solid"),
text = element_text(colour = "black",
face = "plain",
family = base_family,
size = base_size,
vjust = 0.5,
hjust = 0.5,
lineheight = 1),
panel.grid = element_blank(),
strip.background = element_rect(colour = NA),
legend.key = element_rect(colour = NA),
title = element_text(size = rel(1)),
plot.title = element_text(size = rel(1.2), face = "bold"),
strip.text = element_text(),
axis.ticks.length = unit(0.5, "lines")
)
# TODO: get margins right
}
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
source("~/Github/predictability/R/functions_global.R", echo=TRUE)
# plot the variable of interest through time
ggplot2::ggplot(data = terr_day) +
geom_point(aes(x = datetime, y = observation, fill = variable),
shape = 21, alpha = 0.02) +
geom_line(data = avg_terr_day,
aes(x = datetime, y = mean_obs, colour = variable)) +
theme_base()
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
thm + theme(panel.border = element_rect(fill = NA, colour = "white"),
legend.background = element_rect(colour = NA),
line = element_line(colour = "black"),
rect = element_rect(fill = "white", colour = "black"),
text = element_text(colour = "black"))
#' \code{colour} and \code{fill} values to \code{NULL}, except for the top-level
#' elements (\code{line}, \code{rect}, and \code{title}), which have
#' \code{colour = "black"}, and \code{fill = "white"}. This leaves the spacing
#' and-non colour defaults of the default \pkg{ggplot2} themes in place.
#'
#' @inheritParams ggplot2::theme_grey
#'
#' @family themes
#' @export
#' @importFrom ggplot2 theme_grey
theme_foundation <- function(base_size=12, base_family="") {
thm <- theme_grey(base_size = base_size, base_family = base_family)
for (i in names(thm)) {
if ("colour" %in% names(thm[[i]])) {
thm[[i]]["colour"] <- list(NULL)
}
if ("fill" %in% names(thm[[i]])) {
thm[[i]]["fill"] <- list(NULL)
=======
axis.text = ggtext::element_markdown()
) +
ylim(c(-10, 250))
p_le_day
p_le_day <- ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m<sup>-2</sup>)") +
theme(
axis.text = ggtext::element_markdown()
) +
ylim(c(-10, 250))
p_le_day
p_le_day <- ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m<sup>-2</sup>)") +
theme(
axis.title = ggtext::element_markdown()
) +
ylim(c(-10, 250))
p_le_day
p_le_day <- ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m <sup>-2</sup>)") +
theme(
axis.title.x = ggtext::element_markdown(),
axis.title.y = ggtext::element_markdown()
) +
ylim(c(-10, 250))
p_le_day
p_nee_day <- ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date",
y = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)") +
theme(
axis.title.y = element_markdown()
)
p_nee_day
p_le_day <- ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m<sup>-2</sup>)") +
theme(
axis.title.x = ggtext::element_markdown(),
axis.title.y = ggtext::element_markdown()
) +
ylim(c(-10, 250))
p_nee_day <- ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date",
y = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)") +
theme(
axis.title.y = element_markdown()
)
# make one of both plots side by side
p_terr_day <- p_le_day + p_nee_day
p_terr_day
unique(aquat_day$variable)
oxy_day <- aquat_day %>%
dplyr::filter(variable == "oxygen")
temp_day <- aquat_day %>%
dplyr::filter(variable == "temperature")
chla_day <- aquat_day %>%
dplyr::filter(variable == "chla")
mean_oxy_day <- oxy_day %>%
dplyr::group_by(datetime) %>%
dplyr::summarize(mean_oxy = mean(observation, na.rm = TRUE))
mean_oxy_day
ggplot() +
geom_point(data = oxy_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "grey80") +
geom_line(data = mean_oxy_day,
aes(x = datetime, y = mean_oxy)) +
theme_base() +
labs(x = "Date", y = "Dissolved Oxygen mg L<sup>-1</sup>") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = oxy_day,
aes(x = datetime, y = oxygen),
shape = 21, alpha = 0.02, fill = "grey80") +
geom_line(data = mean_oxy_day,
aes(x = datetime, y = mean_oxy)) +
theme_base() +
labs(x = "Date", y = "Dissolved Oxygen mg L<sup>-1</sup>") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = oxy_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "grey80") +
geom_line(data = mean_oxy_day,
aes(x = datetime, y = mean_oxy)) +
theme_base() +
labs(x = "Date", y = "Dissolved Oxygen mg L<sup>-1</sup>") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = temp_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "grey80") +
geom_line(data = mean_temp_day,
aes(x = datetime, y = mean_temp)) +
theme_base() +
labs(x = "Date", y = "Surface Mean Daily Water Temperature (°C)") +
theme(
axis.title.y = element_markdown()
)
mean_temp_day <- temp_day %>%
dplyr::group_by(datetime) %>%
dplyr::summarize(mean_temp = mean(observation, na.rm = TRUE))
chla_day <- aquat_day %>%
dplyr::filter(variable == "chla")
mean_chla_day <- chla_day %>%
dplyr::group_by(datetime) %>%
dplyr::summarize(mean_chla = mean(observation, na.rm = TRUE))
ggplot() +
geom_point(data = oxy_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "grey80") +
geom_line(data = mean_oxy_day,
aes(x = datetime, y = mean_oxy)) +
theme_base() +
labs(x = "Date",
y = "Surface Mean Daily Dissolved Oxygen (mg L<sup>-1</sup>)") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = temp_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "grey80") +
geom_line(data = mean_temp_day,
aes(x = datetime, y = mean_temp)) +
theme_base() +
labs(x = "Date", y = "Surface Mean Daily Water Temperature (°C)") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = temp_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "lightred") +
geom_line(data = mean_temp_day,
aes(x = datetime, y = mean_temp)) +
theme_base() +
labs(x = "Date", y = "Surface Mean Daily Water Temperature (°C)") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = temp_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "#dd6e0f") +
geom_line(data = mean_temp_day,
aes(x = datetime, y = mean_temp)) +
theme_base() +
labs(x = "Date", y = "Surface Mean Daily Water Temperature (°C)") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = chla_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "#dd6e0f") +
geom_line(data = mean_chla_day,
aes(x = datetime, y = mean_chla)) +
theme_base() +
labs(x = "Date",
y = "Daily Mean Chlorophyll-a Concentration (mg L<sup>-1</sup>)") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = chla_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "#dd6e0f") +
geom_line(data = mean_chla_day,
aes(x = datetime, y = mean_chla)) +
theme_base() +
labs(x = "Date",
y = "Daily Mean Chlorophyll-a Concentration (mg L<sup>-1</sup>)") +
theme(
axis.title.y = element_markdown()
)  +
ylim(c(0, 100))
ggplot() +
geom_point(data = chla_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "#dd6e0f") +
geom_line(data = mean_chla_day,
aes(x = datetime, y = mean_chla)) +
theme_base() +
labs(x = "Date",
y = "Daily Mean Chlorophyll-a Concentration (mg L<sup>-1</sup>)") +
theme(
axis.title.y = element_markdown()
)  +
ylim(c(0, 175))
ggplot() +
geom_point(data = chla_day,
aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "#dd6e0f") +
geom_line(data = mean_chla_day,
aes(x = datetime, y = mean_chla)) +
theme_base() +
labs(x = "Date",
y = "Daily Mean Chlorophyll-a Concentration (mg L<sup>-1</sup>)") +
theme(
axis.title.y = element_markdown()
)  +
ylim(c(0, 75))
# beetles ======================================================================
beetles <- listed_res$beetles
unique(beetles$variable)
names(listed_res)
unique((listed_res$aquatic_daily)$variable)
unique((listed_res$aquatic_hourly)$variable)
unique((listed_res$terrestrial_30mins)$variable)
unique((listed_res$terrestrial_daily)$variable)
unique((listed_res$phenology)$variable)
unique((listed_res$ticks)$variable)
unique((listed_res$beetles)$variable)
matching_list <- list(
aquatic_daily = list(
oxygen =
"Surface mean daily dissolved oxygen concentration (mg L<sup>-1</sup>",
temperature = "Surface mean daily water temperature (°C)",
chla = "Mean daily chlorophyll-a concentration (mg L<sup>-1</sup>"
),
aquatic_hourly = list(
temperature = "Surface hourly water temperature (°C)"
),
terrestrial_30mins = list(
nee = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)",
le = "Latent Heat Flux (W m<sup>-2</sup>)"
),
terrestrial_daily = list(
nee = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)",
le = "Latent Heat Flux (W m<sup>-2</sup>)"
),
phenology = list(
gcc_90 = "Green chromatic coordinate (90th percentile)",
rcc_90 = "Red chromatic coordinate (90th percentile)"
),
ticks = list(
amblyomma_americanum =
paste0("Density of *Amblyomma americanum* nympths",
"per week (ticks per 1.6km<sup>2</sup>"
),
beetles = list(
abundance = "Total number of carabids per-trap-night",
ricness = "Total number of unique species in a sampling bout"
)
)
if(variables == "all") {
df <- listed_res$`challenge`
for(i in unique())
}
p <- ggplot2::ggplot(data = listed_res$challenge) +
>>>>>>> refs/remotes/origin/main
}
matching_list <- list(
aquatic_daily = list(
oxygen =
"Surface mean daily dissolved oxygen concentration (mg L<sup>-1</sup>",
temperature = "Surface mean daily water temperature (°C)",
chla = "Mean daily chlorophyll-a concentration (mg L<sup>-1</sup>"
),
aquatic_hourly = list(
temperature = "Surface hourly water temperature (°C)"
),
terrestrial_30mins = list(
nee = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)",
le = "Latent Heat Flux (W m<sup>-2</sup>)"
),
terrestrial_daily = list(
nee = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)",
le = "Latent Heat Flux (W m<sup>-2</sup>)"
),
phenology = list(
gcc_90 = "Green chromatic coordinate (90th percentile)",
rcc_90 = "Red chromatic coordinate (90th percentile)"
),
ticks = list(
amblyomma_americanum =
paste0("Density of *Amblyomma americanum* nympths",
"per week (ticks per 1.6km<sup>2</sup>"
),
beetles = list(
abundance = "Total number of carabids per-trap-night",
ricness = "Total number of unique species in a sampling bout"
)
)
beetles = list(
abundance = "Total number of carabids per-trap-night",
ricness = "Total number of unique species in a sampling bout"
)
list(
amblyomma_americanum =
paste0("Density of *Amblyomma americanum* nympths",
"per week (ticks per 1.6km<sup>2</sup>"
)
list(
amblyomma_americanum =
paste0("Density of *Amblyomma americanum* nympths",
"per week (ticks per 1.6km<sup>2</sup>")
)
list(
amblyomma_americanum =
paste0("Density of *Amblyomma americanum* nympths",
"per week (ticks per 1.6km<sup>2</sup>")
)
list(
abundance = "Total number of carabids per-trap-night",
ricness = "Total number of unique species in a sampling bout"
)
matching_list <- list(
aquatic_daily = list(
oxygen =
"Surface mean daily dissolved oxygen concentration (mg L<sup>-1</sup>",
temperature = "Surface mean daily water temperature (°C)",
chla = "Mean daily chlorophyll-a concentration (mg L<sup>-1</sup>"
),
aquatic_hourly = list(
temperature = "Surface hourly water temperature (°C)"
),
terrestrial_30mins = list(
nee = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)",
le = "Latent Heat Flux (W m<sup>-2</sup>)"
),
terrestrial_daily = list(
nee = "Net ecosystem exchange (g C m<sup>-2</sup> day<sup>-1</sup>)",
le = "Latent Heat Flux (W m<sup>-2</sup>)"
),
phenology = list(
gcc_90 = "Green chromatic coordinate (90th percentile)",
rcc_90 = "Red chromatic coordinate (90th percentile)"
),
ticks = list(
amblyomma_americanum =
paste0("Density of *Amblyomma americanum* nympths",
"per week (ticks per 1.6km<sup>2</sup>")
),
beetles = list(
abundance = "Total number of carabids per-trap-night",
ricness = "Total number of unique species in a sampling bout"
)
)
matching_list$aquatic_daily
for(i in matching_list$aquatic_daily) {
print(i)
}
<<<<<<< HEAD
thm + theme(panel.border = element_rect(fill = NA, colour = "white"),
legend.background = element_rect(colour = NA),
line = element_line(colour = "black"),
rect = element_rect(fill = "white", colour = "black"),
text = element_text(colour = "black"))
}
#' Theme Base
#'
#' Theme similar to the default settings of the \sQuote{base} R graphics.
#'
#' @inheritParams ggplot2::theme_bw
#' @export
#' @family themes
#' @example inst/examples/ex-theme_base.R
theme_base <- function(base_size = 16, base_family = "") {
theme_foundation() +
theme(line = element_line(colour = "black",
lineend = "round",
linetype = "solid"),
rect = element_rect(fill = "white",
colour = "black",
linetype = "solid"),
text = element_text(colour = "black",
face = "plain",
family = base_family,
size = base_size,
vjust = 0.5,
hjust = 0.5,
lineheight = 1),
panel.grid = element_blank(),
strip.background = element_rect(colour = NA),
legend.key = element_rect(colour = NA),
title = element_text(size = rel(1)),
plot.title = element_text(size = rel(1.2), face = "bold"),
strip.text = element_text(),
axis.ticks.length = unit(0.5, "lines")
)
# TODO: get margins right
}
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
theme_foundation() +
theme(line = element_line(colour = "black",
lineend = "round",
linetype = "solid"),
rect = element_rect(fill = "white",
colour = "black",
linetype = "solid"),
text = element_text(colour = "black",
face = "plain",
family = base_family,
size = base_size,
vjust = 0.5,
hjust = 0.5,
lineheight = 1),
panel.grid = element_blank(),
strip.background = element_rect(colour = NA),
legend.key = element_rect(colour = NA),
title = element_text(size = rel(1)),
plot.title = element_text(size = rel(1.2), face = "bold"),
strip.text = element_text(),
axis.ticks.length = unit(0.5, "lines"),
# add my addition here
plot.background = element_rect(colour = "white")
)
#' Theme Base
#'
#' Theme similar to the default settings of the \sQuote{base} R graphics.
#'
#' @inheritParams ggplot2::theme_bw
#' @export
#' @family themes
#' @example inst/examples/ex-theme_base.R
theme_base <- function(base_size = 16, base_family = "") {
theme_foundation() +
theme(line = element_line(colour = "black",
lineend = "round",
linetype = "solid"),
rect = element_rect(fill = "white",
colour = "black",
linetype = "solid"),
text = element_text(colour = "black",
face = "plain",
family = base_family,
size = base_size,
vjust = 0.5,
hjust = 0.5,
lineheight = 1),
panel.grid = element_blank(),
strip.background = element_rect(colour = NA),
legend.key = element_rect(colour = NA),
title = element_text(size = rel(1)),
plot.title = element_text(size = rel(1.2), face = "bold"),
strip.text = element_text(),
axis.ticks.length = unit(0.5, "lines"),
# add my addition here
plot.background = element_rect(colour = "white")
)
# TODO: get margins right
}
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
#' \code{colour} and \code{fill} values to \code{NULL}, except for the top-level
#' elements (\code{line}, \code{rect}, and \code{title}), which have
#' \code{colour = "black"}, and \code{fill = "white"}. This leaves the spacing
#' and-non colour defaults of the default \pkg{ggplot2} themes in place.
#'
#' @inheritParams ggplot2::theme_grey
#'
#' @family themes
#' @export
#' @importFrom ggplot2 theme_grey
theme_foundation <- function(base_size=12, base_family="") {
thm <- theme_grey(base_size = base_size, base_family = base_family)
for (i in names(thm)) {
if ("colour" %in% names(thm[[i]])) {
thm[[i]]["colour"] <- list(NULL)
}
if ("fill" %in% names(thm[[i]])) {
thm[[i]]["fill"] <- list(NULL)
}
}
thm + theme(panel.border = element_rect(fill = NA),
legend.background = element_rect(colour = NA),
line = element_line(colour = "black"),
rect = element_rect(fill = "white", colour = "black"),
text = element_text(colour = "black"))
}
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
#' Theme Base
#'
#' Theme similar to the default settings of the \sQuote{base} R graphics.
#'
#' @inheritParams ggplot2::theme_bw
#' @export
#' @family themes
#' @example inst/examples/ex-theme_base.R
theme_base <- function(base_size = 16, base_family = "") {
theme_foundation() +
theme(line = element_line(colour = "black",
lineend = "round",
linetype = "solid"),
rect = element_rect(fill = "white",
colour = "black",
linetype = "solid"),
text = element_text(colour = "black",
face = "plain",
family = base_family,
size = base_size,
vjust = 0.5,
hjust = 0.5,
lineheight = 1),
panel.grid = element_blank(),
strip.background = element_rect(colour = NA),
legend.key = element_rect(colour = NA),
title = element_text(size = rel(1)),
plot.title = element_text(size = rel(1.2), face = "bold"),
strip.text = element_text(),
axis.ticks.length = unit(0.5, "lines"),
# add my addition here
plot.background = element_rect(colour = NA)
)
# TODO: get margins right
}
ggplot() +
geom_point(data = le_day,
aes(x = datetime, y = le),
shape = 21, alpha = 0.02, fill = "red") +
geom_line(data = le_avg_day,
aes(x = datetime, y = mean_le)) +
theme_base() +
labs(x = "Date", y = "Latent Heat Flux (W m^-2)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
nee_day <- terr_day %>%
dplyr::filter(variable == "nee") %>%
dplyr::mutate(nee = observation) %>%
dplyr::select(-variable)
nee_avg_day <- nee_day %>%
dplyr::group_by(datetime) %>%
dplyr::summarize(mean_nee = mean(nee, na.rm = TRUE))
ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date", y = "Net ecosystem exchange (g C m^-2 day^-1)") +
theme(
axis.title.y = element_markdown()
) +
ylim(c(-10, 250))
ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date", y = "Net ecosystem exchange (g C m^-2 day^-1)") +
theme(
axis.title.y = element_markdown()
) +
ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date", y = "Net ecosystem exchange (g C m^-2 day^-1)") +
theme(
axis.title.y = element_markdown()
)
ggplot() +
geom_point(data = nee_day,
aes(x = datetime, y = nee),
shape = 21, alpha = 0.02, fill = "blue") +
geom_line(data = nee_avg_day,
aes(x = datetime, y = mean_nee)) +
theme_base() +
labs(x = "Date", y = "Net ecosystem exchange (g C m^-2 day^-1)") +
theme(
axis.title.y = element_markdown()
)
=======
for(i in names(matching_list$aquatic_daily)) {
print(i)
}
unique(beetles$variable)
plot(abund_beetle, x = "datetime", y = "variable")
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = value))
abund_beetle
abund_beetle <- beetles %>%
dplyr::filter(variable == "abundance")
abund_beetle
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation))
mean_abund_beetle <- abund_beetle %>%
dplyr::group_by(datetime) %>%
dplyr::summarize(mean_abund = mean(observation, na.rm = TRUE))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation)) +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = observation))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation)) +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "#dd6e0f") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "purple") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "purple") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund)) +
theme_base() +
labs(x = "Date",
y = "Total number of carabids per-trap-night") +
theme(
axis.title.y = element_markdown()
)  +
ylim(c(0, 75))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "purple") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund)) +
theme_base() +
labs(x = "Date",
y = "Total number of carabids per-trap-night") +
theme(
axis.title.y = element_markdown()
)  +
ylim(c(0, 20))
>>>>>>> refs/remotes/origin/main
