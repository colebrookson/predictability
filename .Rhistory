geom_point(aes(x = datetime, y = observation)) +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "#dd6e0f") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "purple") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "purple") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund)) +
theme_base() +
labs(x = "Date",
y = "Total number of carabids per-trap-night") +
theme(
axis.title.y = element_markdown()
)  +
ylim(c(0, 75))
ggplot(data = beetles) +
geom_point(aes(x = datetime, y = observation),
shape = 21, alpha = 0.02, fill = "purple") +
geom_line(data = mean_abund_beetle, aes(x = datetime, y = mean_abund)) +
theme_base() +
labs(x = "Date",
y = "Total number of carabids per-trap-night") +
theme(
axis.title.y = element_markdown()
)  +
ylim(c(0, 20))
>>>>>>> refs/remotes/origin/main
library(tidyverse)
library(deSolve)
library(FME)
# initial parameters
pars <- c(alpha = 1, beta = 0.2, delta = 0.5, gamma = 0.2)
init <- c(x = 1, y = 2) #initial state
times <- seq(0, 100, 0.1)
#' @param parameters named numeric vector. The parameters needed for the model
#' to run. Should be a named numeric vector of length 4
#' @param state named numeric vector. The initial state values of the system.
#' Should be named "x" and "y" respectively and passed as integers or numeric
#' values. DEFAULT is c(x = 1, y = 2)
#' @param times numeric vector.  DEFAULT is c(x = 1, y = 2)
#' @returns A numeric vector.
#' @examples
#' lv_fme_wrapper()
#' add(10, 1)
lv_fme_wrapper <- function(parameters, state = c(x = 1, y = 2),
times = seq(0, 100, 0.1)) {
# do type checks
if(!is.numeric(parameters)) {
errorCondition("ERROR - parameters not a numeric vector")
}
if(any(names(parameters) != c("alpha", "beta", "delta", "gamma"))) {
errorCondition("ERROR - names of parameters incorrect")
}
# set initial conditions
state <- c(x = 1, y = 2)
# get the derrivative
lv_model <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
d_x <- alpha * x - beta * x * y
d_y <- delta * beta * x * y - gamma * y
return(list(c(x = d_x, y = d_y)))
})
}
# do the solve within the wrapper
deSolve::lsoda(y = state, times = times, func = lv_model,
parms = parameters)
}
# initial run
lv_results <- lv_fme_wrapper(
parameters = pars
)
# https://strimas.com/post/lotka-volterra/
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = var)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density") +
theme_base()
source("~/Github/predictability/R/functions_global.R", echo=TRUE)
library(here)
source(here("./R/functions_global.R"))
# initial run
lv_results <- lv_fme_wrapper(
parameters = pars
)
# https://strimas.com/post/lotka-volterra/
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = var)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density") +
theme_base()
# simple model of logistic growth
dNt <- function(r, N) r * N * (1 - N)
# iterate growth through time
Nt <- function(r, N, t) {
for (i in 1:(t - 1)) {
# population at next time step is population at current time + pop growth
N[i + 1] <- N[i] + dNt(r, N[i])
}
N
}
t <- 100
r <- 0.1
# lets consider 4 different starting abundances (i.e., N(t=0) values)
Nt0 <- c(0.1, 0.5, 1.5, 2)
# set starting conditions and amount of time
t <- 1000
r <- seq(0.01, 3, .01)
Nt0 <- 0.5
# compute the population sizes across the times
e <- sapply(r, function(r) Nt(r, Nt0, t))
# only use 2nd half of times presuming those will be at equilibrium
thalf <- round(t / 2)
e <- e[thalf:t, ]
t <- nrow(e)
maxE <- max(as.vector(e))
# when r > 2, the population is unstable
# Looking at permutation entropy
pe <- matrix(0, nrow = ncol(e), ncol = 1)
for (i in seq_len(ncol(e))) {
stable <- e[, i]
od <- ordinal_pattern(stable, 3)
pe[i, ] <- permu_entropy(od)
}
library(tidyverse)
library(deSolve)
library(FME)
library(here)
source(here("./R/functions_global.R"))
# initial parameters
pars <- c(alpha = 1, beta = 0.2, delta = 0.5, gamma = 0.2)
init <- c(x = 1, y = 2) #initial state
times <- seq(0, 100, 0.1)
#' @param parameters named numeric vector. The parameters needed for the model
#' to run. Should be a named numeric vector of length 4
#' @param state named numeric vector. The initial state values of the system.
#' Should be named "x" and "y" respectively and passed as integers or numeric
#' values. DEFAULT is c(x = 1, y = 2)
#' @param times numeric vector.  DEFAULT is c(x = 1, y = 2)
#' @returns A numeric vector.
#' @examples
#' lv_fme_wrapper()
#' add(10, 1)
lv_fme_wrapper <- function(parameters, state = c(x = 1, y = 2),
times = seq(0, 100, 0.1)) {
# do type checks
if(!is.numeric(parameters)) {
errorCondition("ERROR - parameters not a numeric vector")
}
if(any(names(parameters) != c("alpha", "beta", "delta", "gamma"))) {
errorCondition("ERROR - names of parameters incorrect")
}
# set initial conditions
state <- c(x = 1, y = 2)
# get the derrivative
lv_model <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
d_x <- alpha * x - beta * x * y
d_y <- delta * beta * x * y - gamma * y
return(list(c(x = d_x, y = d_y)))
})
}
# do the solve within the wrapper
deSolve::lsoda(y = state, times = times, func = lv_model,
parms = parameters)
}
# initial run
lv_results <- lv_fme_wrapper(
parameters = pars
)
# https://strimas.com/post/lotka-volterra/
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = var)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density") +
theme_base()
source("~/Github/predictability/src/R/functions_global.R", echo=TRUE)
# https://strimas.com/post/lotka-volterra/
lv_results %>%
data.frame() %>%
gather(var, pop, -time) %>%
mutate(var = if_else(var == "x", "Prey", "Predator")) %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = var)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Lotka-Volterra predator prey model",
subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density") +
theme_base()
## load in clade virulence data
setwd("~/Downloads/")
data=read.csv("results.csv")
## load in host taxonomy
setwd("~/Desktop/PCM Class/phylofatality/phylo")
## load in host taxonomy
#setwd("~/Desktop/PCM Class/phylofatality/phylo")
taxa=read.csv('taxonomy_mamPhy_5911species.csv',header=T)
taxa$tip=taxa$Species_Name
#label risky clades
data$risk=ifelse(data$clade>data$other, "risky", "non-risky")
rawdata=data
#filter to risk clades
data<- data%>% filter(risk=="risky")
data$risk=NULL
library(dplyr)
library(plyr)
library(tidyr)
library(tidyverse)
## packages
library(dplyr)
setwd("~/Downloads/")
data=read.csv("results.csv")
## load in host taxonomy
#setwd("~/Desktop/PCM Class/phylofatality/phylo")
taxa=read.csv('taxonomy_mamPhy_5911species.csv',header=T)
taxa$tip=taxa$Species_Name
#label risky clades
data$risk=ifelse(data$clade>data$other, "risky", "non-risky")
rawdata=data
#filter to risk clades
data<- data%>% filter(risk=="risky")
library(tidyverse)
#filter to risk clades
data<- data%>% filter(risk=="risky")
data$risk=NULL
#separate variable and virus
data=data %>% separate(ID, c('var', 'virus'))
data
#reorder and clean up table
data=data %>% dplyr::select(virus, host, var, everything())
#rename hosts
data$host=ifelse(data$host=="c", "mammal", "bat")
#separate var into host and var
data=data %>% separate(var, c('host', 'var'), sep=1)
data=read.csv("results.csv")
## load in host taxonomy
#setwd("~/Desktop/PCM Class/phylofatality/phylo")
taxa=read.csv('taxonomy_mamPhy_5911species.csv',header=T)
taxa$tip=taxa$Species_Name
#label risky clades
data$risk=ifelse(data$clade>data$other, "risky", "non-risky")
rawdata=data
#filter to risk clades
data<- data%>% filter(risk=="risky")
data$risk=NULL
#separate variable and virus
data=data %>% separate(ID, c('var', 'virus'))
#add all viruses to replace NAs
data[is.na(data)]<- "all"
#separate var into host and var
data=data %>% separate(var, c('host', 'var'), sep=1)
#rename hosts
data$host=ifelse(data$host=="c", "mammal", "bat")
#reorder and clean up table
data=data %>% dplyr::select(virus, host, var, everything())
data$var=revalue(data$var,c("means"= "mean"))
??revalue
?revalue
#data$var=revalue(data$var,c("means"= "mean"))
data[which(data$var == "means"), "var"] <- "mean"
rawdata_risk<-data
#pull out species in each clade
data$species=data$taxa
data=data %>% dplyr::select(species, everything())
data=data %>% separate_rows(species, sep = ", ")
## experiments
taxa1=taxa %>% select(Species_Name, gen, fam)
taxa1
View(data)
# COLE TESTING =================================================================
data_gen <- data %>%
dplyr::filter(grepl("[[:upper:]]", annot))
# COLE TESTING =================================================================
data_gen <- data %>%
dplyr::filter(grepl("[[:upper:]]", Species))
View(data)
# COLE TESTING =================================================================
data_gen <- data %>%
dplyr::filter(grepl("[[:upper:]]", species))
View(data_gen)
# COLE TESTING =================================================================
data_gen <- data %>%
dplyr::filter(!grepl("[[:upper:]]", species))
# COLE TESTING =================================================================
data_fam <- data %>%
dplyr::filter(grepl("[[:upper:]]", species))
data_gen <- data %>%
dplyr::filter(species !%in% data_fam$species)
data_gen <- data %>%
dplyr::filter(species %in% data_fam$species)
# COLE TESTING =================================================================
`%notin%` <- Negate(`%in%`)
data_gen <- data %>%
dplyr::filter(species %notin% data_fam$species)
data_fam <- data %>%
dplyr::filter(grepl("[[:upper:]]", species))
View(data_fam)
grepl("^[[:upper:]]+$", data$species)
data_fam <- data %>%
dplyr::filter(grepl("^[[:upper:]]+$", species))
data_gen <- data %>%
dplyr::filter(species %notin% data_fam$species)
data_fam <- data %>%
# pick out the family one by only keeping the ones that are all uppercase
dplyr::filter(grepl("^[[:upper:]]+$", species)) %>%
# rename for easier joining
dplyr::rename(fam = species)
data_gen <- data %>%
dplyr::filter(species %notin% data_fam$species) %>%
dplyr::rename(gen = species)
data_fam <- data %>%
# pick out the family one by only keeping the ones that are all uppercase
dplyr::filter(grepl("^[[:upper:]]+$", species)) %>%
# rename for easier joining
dplyr::rename(fam = species)
data_gen <- data %>%
dplyr::filter(species %notin% data_fam$fam) %>%
dplyr::rename(gen = species)
# now join one at a time
taxa <- dplyr::left_join(
taxa,
data_fam,
by = "fam"
)
# now join one at a time
joined_fam <- dplyr::left_join(
data_fam,
taxa,
by = "fam"
)
View(data_fam)
View(data_gen)
taxa=read.csv('taxonomy_mamPhy_5911species.csv',header=T)
taxa$tip=taxa$Species_Name
## experiments
taxa1=taxa %>% select(Species_Name, gen, fam)
taxa
# now join one at a time
joined_fam <- dplyr::left_join(
data_fam,
taxa,
by = "fam"
)
View(taxa)
# now join one at a time
joined_fam <- dplyr::left_join(
taxa,
data_fam,
by = "fam"
)
# now join one at a time
joined_fam <- dplyr::full_join(
taxa,
data_fam,
by = "fam"
)
n_distinct(joined_fam)
View(joined_fam)
joined_gen <- dplyr::full_join(
taxa,
data_gen,
by = "gen"
)
View(joined_gen)
# now filter the ones that didn't get the data from genera and use the family
which_taxa_for_gam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips), all_vars(!is.na()))
# now filter the ones that didn't get the data from genera and use the family
which_taxa_for_gam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips), all_vars(!is.na(.)))
View(which_taxa_for_gam)
# now filter the ones that didn't get the data from genera and use the family
which_taxa_for_gam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(is.na(.)))
View(which_taxa_for_gam)
View(taxa)
View(which_taxa_for_gam)
taxa_fam <- taxa %>%
dplyr::filter(taxa %in% which_taxa_for_gam$taxa)
View(taxa)
taxa_fam <- taxa %>%
dplyr::filter(fam %in% which_taxa_for_gam$fam)
# now filter the ones that got the data from genera and don't need family
which_taxa_for_gam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(!is.na(.)))
# now filter the ones that got the data from genera and don't need family
which_taxa_for_fam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(!is.na(.)))
taxa_fam <- taxa %>%
dplyr::filter(fam %in% which_taxa_for_gam$fam)
joined_fam <- dplyr::full_join(
taxa_fam,
data_fam,
by = "fam"
)
# bind together
all_joined <- rbind(joined_fam, joined_gen)
n_distinct(all_joined)
duplicated(n_distinct())
duplicated(all_joined)
# now join one at a time - use genera preferrentially
joined_gen <- dplyr::full_join(
taxa,
data_gen,
by = "gen"
)
joined_gen
View(joined_gen)
# now filter the ones that got the data from genera and don't need family
which_taxa_for_fam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(!is.na(.)))
View(which_taxa_for_gam)
taxa_fam <- taxa %>%
dplyr::filter(fam %notin% which_taxa_for_gam$fam)
joined_fam <- dplyr::full_join(
taxa_fam,
data_fam,
by = "fam"
)
# bind together
all_joined <- rbind(joined_fam, joined_gen)
n_distinct(all_joined)
# now join one at a time - use genera preferrentially
joined_gen <- dplyr::full_join(
taxa,
data_gen,
by = "gen"
)
View(joined_gen)
# now filter the ones that got the data from genera and don't need family
which_taxa_for_fam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(is.na(.)))
rm(which_taxa_for_gam)
View(which_taxa_for_fam)
taxa_fam <- taxa %>%
dplyr::filter(fam %in% which_taxa_for_gam$fam)
# now filter the ones that got the data from genera and don't need family
which_taxa_for_fam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(is.na(.)))
taxa_fam <- taxa %>%
dplyr::filter(fam %in% which_taxa_for_fam$fam)
joined_fam <- dplyr::full_join(
taxa_fam,
data_fam,
by = "fam"
)
# now remove the ones from joined_gen who had those NA's
joined_gen <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(is.na(.)))
# bind together
all_joined <- rbind(joined_fam, joined_gen)
# now join one at a time - use genera preferrentially
joined_gen <- dplyr::full_join(
taxa,
data_gen,
by = "gen"
)
# now filter the ones that got the data from genera and don't need family
which_taxa_for_fam <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(is.na(.)))
taxa_fam <- taxa %>%
dplyr::filter(fam %in% which_taxa_for_fam$fam)
joined_fam <- dplyr::full_join(
taxa_fam,
data_fam,
by = "fam"
)
# now remove the ones from joined_gen who had those NA's
joined_gen <- joined_gen %>%
dplyr::filter_at(vars(virus, host, var, taxa, tips),
all_vars(!is.na(.)))
# remove the ones in joined_fam already accounted for in joined_gen
joined_fam <- joined_fam %>%
dplyr::filter(gen %notin% joined_gen$gen)
# bind together
all_joined <- rbind(joined_fam, joined_gen)
n_distinct(all_joined)
View(joined_gen)
(0.5 * 30000000) * 0.126 * 0.072
15*30000000
0.05*450
