ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ggsave(
paste0(here::here("./figs/neon-data-timeseries/ticks-by-site/"),
"ticks-", site, ".png"),
ticks_site_plot
)
# now take the observations and do the plotting function to the get the vals
obs <- ticks_site$observation
all_sites[[site_num]] <- obs
site_num <- site_num + 1
#autocorr_plot(obs, "ticks", site = site)
}
partial_all_sites <- sapply(all_sites, pacf, pl=FALSE)
?pacf
sapply(all_sites, pacf, pl=FALSE)
pacf(obs, pl = FALSE)
x <- pacf(obs, pl = FALSE)
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf
pacf(obs, pl = TRUE)
stderr(obs)
obs
#' Calculate standard error
#'
#' @description Easy add on function to calculate standard error
#'
#' @param x vector of values
#'
#' @usage std_err(df, na.rm = TRUE)
#' @return numeric value
#'
std_err <- function(x) {
return(sd(x, na.rm = TRUE) / sqrt(length(x)))
}
std_err(obs)
std_err(x$acf)
1.96 * std_err(x$acf)
#' @description
#' The actual plus/minus value of the CI (assuming 95%) from an autocorrelation
#' function
#'
#' @param x vector. The numeric vector to calculate based on
#' @param ci double. Defaul = 0.95, denoting the CI level
#' @param ci.type character. Two options, "white" denoting white noise
#' hypothesis or "ma" which is the moving average
#'
#' @return clim0 numeric. The value for upper and lower
get_clim <- function(x, ci=0.95, ci.type="white"){
#' Gets confidence limit data from acf object `x`
if (!ci.type %in% c("white", "ma")) stop('`ci.type` must be "white" or "ma"')
if (class(x) != "acf") stop('pass in object of class "acf"')
clim0 <- qnorm((1 + ci)/2) / sqrt(x$n.used)
if (ci.type == "ma") {
clim <- clim0 * sqrt(cumsum(c(1, 2 * x$acf[-1]^2)))
return(clim[-length(clim)])
} else {
return(clim0)
}
}
get_clim(obs)
get_clim(pacf(obs, pl = FALSE))
all_sites_pacf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_acf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_pacf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_site_acf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
site_num <- 1
# go through each site and get the values then plot them
for(site in unique(ticks$site_id)) {
ticks_site <- ticks[which(ticks$site_id == site), ]
# site by site plot
ticks_site_plot <- ggplot2::ggplot(data = ticks_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ggsave(paste0(here::here("./figs/neon-data-timeseries/ticks-by-site/"),
"ticks-", site, ".png"),
ticks_site_plot)
# now take the observations and do the plotting function to the get the vals
obs <- ticks_site$observation
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf
all_site_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf
all_site_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
# iterate and plot the outputs
site_num <- site_num + 1
autocorr_plot(obs, "ticks", site = site)
}
all_sites_pacf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_acf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_pacf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_acf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
site_num <- 1
# go through each site and get the values then plot them
for(site in unique(ticks$site_id)) {
ticks_site <- ticks[which(ticks$site_id == site), ]
# site by site plot
ticks_site_plot <- ggplot2::ggplot(data = ticks_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ggsave(paste0(here::here("./figs/neon-data-timeseries/ticks-by-site/"),
"ticks-", site, ".png"),
ticks_site_plot)
# now take the observations and do the plotting function to the get the vals
obs <- ticks_site$observation
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
# iterate and plot the outputs
site_num <- site_num + 1
autocorr_plot(obs, "ticks", site = site)
}
#' We need a plot of each of the autocorrelation plots, ideally one for each
#' site that we're interested in
#' @param obs vector. The vector of observations we're doing the calculation
#' on
#' @param data_name character. The character denoting which data we're actually
#' plotting
#' @param site character. Default NULL. This denotes which sxite the obs are for
#' since most will have a differnt set of sites for each dataframe
#'
#' @return none. instead of return, two plots are written to file
autocorr_plot <- function(obs, data_name, site=NULL) {
if(!is.null(site)) {
png(
paste0(here::here("./figs/neon-autocorrelation-plots/"),
data_name, "-", site, ".png"),
)
acf(obs,pl=TRUE)
png(
paste0(here::here("./figs/neon-autocorrelation-plots/"),
"partial-", data_name, "-", site, ".png"),
)
pacf(obs,pl=TRUE)
dev.off()
}
png(
paste0(here::here("./figs/neon-autocorrelation-plots/"),
data_name, ".png"),
)
acf(obs,pl=TRUE)
png(
paste0(here::here("./figs/neon-autocorrelation-plots/"),
"partial-", data_name, ".png"),
)
pacf(obs,pl=TRUE)
dev.off()
}
all_sites_pacf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_acf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_pacf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_acf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
site_num <- 1
# go through each site and get the values then plot them
for(site in unique(ticks$site_id)) {
ticks_site <- ticks[which(ticks$site_id == site), ]
# site by site plot
ticks_site_plot <- ggplot2::ggplot(data = ticks_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ggsave(paste0(here::here("./figs/neon-data-timeseries/ticks-by-site/"),
"ticks-", site, ".png"),
ticks_site_plot)
# now take the observations and do the plotting function to the get the vals
obs <- ticks_site$observation
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
# iterate and plot the outputs
site_num <- site_num + 1
autocorr_plot(obs, "ticks", site = site)
}
all_sites_pacf
olMeans(do.call(rbind, all_sites_pacf))
colMeans(do.call(rbind, all_sites_pacf))
all_sites_pacf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_acf <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_pacf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
all_sites_acf_ci <- vector(mode = "list", length =
length(unique(ticks$site_id)))
site_num <- 1
# go through each site and get the values then plot them
for(site in unique(ticks$site_id)) {
ticks_site <- ticks[which(ticks$site_id == site), ]
# site by site plot
ticks_site_plot <- ggplot2::ggplot(data = ticks_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ggsave(paste0(here::here("./figs/neon-data-timeseries/ticks-by-site/"),
"ticks-", site, ".png"),
ticks_site_plot)
# now take the observations and do the plotting function to the get the vals
obs <- ticks_site$observation
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf[1:18]
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf[1:18]
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
# iterate and plot the outputs
site_num <- site_num + 1
autocorr_plot(obs, "ticks", site = site)
}
colMeans(do.call(rbind, all_sites_pacf))
View(all_sites_pacf)
all_sites_pacf[[1]]
# now take the averages and plot those
mean_pacf <- colMeans(do.call(rbind, all_sites_pacf), na.rm = TRUE)
mean_pacf
qnorm((1 + 0.95)/2) / sqrt(mean_pacf$n.used)
qnorm((1 + 0.95)/2) / sqrt(18)
plot(x = lags, y = mean_pacf, type = "h")
lags <- c(1:18)
plot(x = lags, y = mean_pacf, type = "h")
hline(x = 0)
abline(x = 0)
abline(h = 0)
abline(h = 0, col = "grey80")
abline(h = 0, col = "grey80", lty = 2)
plot(x = lags, y = mean_pacf, type = "h")
abline(h = 0, col = "grey80", lty = 2)
all_sites_pacf_ci
colMeans(do.call(all_sites_pacf_ci))
colMeans(do.call(rbind, all_sites_pacf_ci), na.rm = TRUE)
ci <- qnorm((1 + 0.95)/2) / sqrt(18)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
plot(x = lags, y = mean_pacf, type = "h",
xlim = c((max(mean_pac)+0.5*max(mean_pac))),
-(max(mean_pac)+0.5*max(mean_pac)))
plot(x = lags, y = mean_pacf, type = "h",
xlim = c((max(mean_pacf)+0.5*max(mean_pacf))),
-(max(mean_pacf)+0.5*max(mean_pacf)))
c((max(mean_pacf)+0.5*max(mean_pacf))),
(max(mean_pacf)+0.5*max(mean_pacf))
(max(mean_pacf)+0.5*max(mean_pacf)))
plot(x = lags, y = mean_pacf, type = "h",
xlim = c((max(mean_pacf)+0.5*max(mean_pacf)),
-(max(mean_pacf)+0.5*max(mean_pacf)))
abline(h = 0, col = "grey80", lty = 2)
(max(mean_pacf)+0.5*max(mean_pacf))
(max(mean_pacf)+0.5*max(mean_pacf))
-(max(mean_pacf)+0.5*max(mean_pacf))
plot(x = lags, y = mean_pacf, type = "h",
xlim = c((max(mean_pacf)+0.5*max(mean_pacf)),
-(max(mean_pacf)+0.5*max(mean_pacf))))
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
plot(x = lags, y = mean_pacf, type = "h",
ylim = c((max(mean_pacf)+0.5*max(mean_pacf)),
-(max(mean_pacf)+0.5*max(mean_pacf))))
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))))
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", y = "Mean PACF")
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
png(paste0(here::here("./figs/neon-autocorrelation-plots/"),
"mean-pacf-ticks", ".png"),
)
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
mean_pacf
ci <- 1.96*std_error(mean_pacf)
ci <- 1.96*std_err(mean_pacf)
ci
lags <- c(1:18)
png(paste0(
here::here("./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"pacf-mean-ticks", ".png"),
)
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
dev.off()
png(paste0(
here::here("./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"pacf-mean-ticks", ".png"),
)
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
png(paste0(
here::here("./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"pacf-mean-ticks", ".png"),
)
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
png(paste0(
here::here("./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"pacf-mean-ticks", ".png"),
)
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
png(paste0(
here::here("./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"acf-mean-ticks", ".png"),
)
mean_acf <- colMeans(do.call(rbind, all_sites_acf), na.rm = TRUE)
ci <- 1.96*std_err(mean_acf)
lags <- c(1:18)
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf)+0.5*max(mean_acf)),
(max(mean_acf)+0.5*max(mean_acf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
library(targets)
tar_visnetwork()
tar_make()
ticks <- readr::read_csv(here::here("./data/efi-neon-data/ticks.csv"))
terr_day <- readr::read_csv(
here::here("./data/efi-neon-data/terrestrial-daily.csv"))
terr_30 <- readr::read_csv(here::here("./data/efi-neon-data/terrestrial-30-mins.csv"))
site_data <- readr::read_csv(here::here("./data/efi-neon-data/site_data.csv"))
phenology <- readr::read_csv(here::here("./data/efi-neon-data/phenology.csv"))
beetles <- readr::read_csv(here::here("./data/efi-neon-data/beetles.csv"))
aquatic_hr <- readr::read_csv(here::here("./data/efi-neon-data/aquatic-hourly.csv"))
aquatic_day <- readr::read_csv(here::here("./data/efi-neon-data/aquatic-daily.csv"))
unique(terr_day$site_id)
site <- "BART"
terr_day_site <- terr_day[which(terr_day$site_id == site), ]
terr_day_site
ggplot2::ggplot() +
ggplot2::geom_line(data = terr_day_site %>% dplyr::filer(variable == "le"),
ggplot2::aes(x = datetime, y = observation))
library(magrittr)
ggplot2::ggplot() +
ggplot2::geom_line(data = terr_day_site %>% dplyr::filer(variable == "le"),
ggplot2::aes(x = datetime, y = observation))
ggplot2::ggplot() +
ggplot2::geom_line(data = terr_day_site %>% dplyr::filter(variable == "le"),
ggplot2::aes(x = datetime, y = observation))
ggplot2::ggplot() +
ggplot2::geom_line(data = terr_day_site %>% dplyr::filter(variable == "le"),
ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(data = terr_day_site %>% dplyr::filter(variable == "le"),
ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
source(here::here("./R/functions_global.R"))
source(here::here("./src/R/functions_global.R"))
ggplot2::ggplot() +
ggplot2::geom_line(data = terr_day_site %>% dplyr::filter(variable == "le"),
ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(data = terr_day_site %>% dplyr::filter(variable == "le"),
ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
library(ggplot2)
ggplot() +
geom_line(data = terr_day_site %>% dplyr::filter(variable == "le"),
aes(x = datetime, y = observation)) +
geom_point(data = terr_day_site %>% dplyr::filter(variable == "le"),
aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ggplot() +
geom_line(data = terr_day_site %>% dplyr::filter(variable == "le"),
aes(x = datetime, y = observation)) +
geom_point(data = terr_day_site %>% dplyr::filter(variable == "le"),
aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21, alpha = 0.2) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ggplot() +
geom_line(data = terr_day_site %>% dplyr::filter(variable == "le"),
aes(x = datetime, y = observation)) +
geom_point(data = terr_day_site %>% dplyr::filter(variable == "le"),
aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21, alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time")
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, fill = variable),
size = 2, fill = "red3", shape = 21, alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time")
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable),
size = 2, fill = "red3", alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time")
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable),
size = 0.5, fill = "red3", alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time")
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, fill = variable),
size = 0.5, fill = "red3", alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time") +
scale_
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable),
size = 0.5, alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time") +
scale_
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable),
size = 0.5, alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time")
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable),
size = 2, alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux", x = "Time")
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable),
size = 2, alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux / Net Ecosystem Exchange", x = "Time")
ggplot() +
geom_line(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable)) +
geom_point(data = terr_day_site,
aes(x = datetime, y = observation, colour = variable),
size = 2, alpha = 0.2) +
theme_base() +
labs(y = "Latent heat flux / Net Ecosystem Exchange", x = "Time")
obs_le <- terr_day_site$observation[which(variable == "le")]
obs_le <- terr_day_site$observation[which(terr_day_site$variable == "le")]
obs_nee <- terr_day_site$observation[which(terr_day_site$variable == "nee")]
81.72/2
40.86+1125
