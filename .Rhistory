abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
}
dev.list()
dev.off()
# use some vectors to store the calculations across all sites so we can get
# an average across all sites
for(ob_type in unique(data$variable)) {
data_ob <- data[
which(data$variable == ob_type),
]
all_sites_pacf <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_acf <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_pacf_ci <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_acf_ci <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
site_num <- 1
# go through each site and get the values then plot them
for(site in unique(data_ob$site_id)) {
data_site <- data_ob[which(data_ob$site_id == site &
!is.na(data_ob$observation)), ]
# site by site plot
data_site_plot <- ggplot2::ggplot(data = data_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
ggplot2::labs(y = ob_type, x = "Time")
ggsave(paste0(
here::here("./figs/neon-data-timeseries/", subfolder, "/"),
datatype, ob_type, "-", site, ".png"),
data_site_plot)
obs<-data_site$observation[which(data_site$variable == ob_type)]
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf[1:18]
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf[1:18]
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
#plot the outputs
autocorr_plot(obs = obs, data_name = ob_type, site = site,
sub_folder = subfolder)
}
# iterate and plot the outputs
site_num <- site_num + 1
# now take the averages and plot those
mean_pacf <- colMeans(do.call(rbind, all_sites_pacf), na.rm = TRUE)
ci <- 1.96*std_err(mean_pacf)
lags <- c(1:18)
# plot the partial averages
png(
paste0(
here::here(
"./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"pacf-mean-", datatype, "-", ob_type , ".png"))
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
# plot the regular averages
png(
paste0(
here::here(
"./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"acf-mean-", datatype, "-", ob_type, ".png"))
mean_acf <- colMeans(do.call(rbind, all_sites_acf), na.rm = TRUE)
ci <- 1.96*std_err(mean_acf)
lags <- c(1:18)
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf)+0.5*max(mean_acf)),
(max(mean_acf)+0.5*max(mean_acf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
}
data_site_plot
# site by site plot
data_site_plot <- ggplot2::ggplot(data = data_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
ggplot2::labs(y = ob_type, x = "Time")
data_site_plot
data_site <- data_ob[which(data_ob$site_id == site &
!is.na(data_ob$observation)), ]
data_site
# site by site plot
data_site_plot <- ggplot2::ggplot(data = data_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
ggplot2::labs(y = ob_type, x = "Time")
data_site_plot
ggplot2::ggplot(data = data_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
ggplot2::labs(y = ob_type, x = "Time")
obs<-data_site$observation[which(data_site$variable == ob_type)]
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf[1:18]
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf[1:18]
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
#plot the outputs
autocorr_plot(obs = obs, data_name = ob_type, site = site,
sub_folder = subfolder)
acf(obs,pl=TRUE)
pacf(obs,pl=TRUE)
dev.list()
# site by site plot
data_site_plot <- ggplot2::ggplot(data = data_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
ggplot2::labs(y = ob_type, x = "Time")
data_site_plot
ggsave(paste0(
here::here("./figs/neon-data-timeseries/", subfolder, "/"),
datatype, ob_type, "-", site, ".png"),
data_site_plot)
obs<-data_site$observation[which(data_site$variable == ob_type)]
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf[1:18]
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf[1:18]
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
#plot the outputs
autocorr_plot(obs = obs, data_name = ob_type, site = site,
sub_folder = subfolder)
obs = obs
data_name = ob_type
site = site
sub_folder = subfolder
acf(obs,pl=TRUE)
pacf(obs,pl=TRUE)
tar_visnetwork()
tar_make()
# use some vectors to store the calculations across all sites so we can get
# an average across all sites
for(ob_type in unique(data$variable)) {
data_ob <- data[
which(data$variable == ob_type),
]
all_sites_pacf <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_acf <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_pacf_ci <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_acf_ci <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
site_num <- 1
# go through each site and get the values then plot them
for(site in unique(data_ob$site_id)) {
data_site <- data_ob[which(data_ob$site_id == site &
!is.na(data_ob$observation)), ]
# site by site plot
data_site_plot <- ggplot2::ggplot(data = data_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
ggplot2::labs(y = ob_type, x = "Time")
ggsave(paste0(
here::here("./figs/neon-data-timeseries/", subfolder, "/"),
datatype, ob_type, "-", site, ".png"),
data_site_plot)
obs<-data_site$observation[which(data_site$variable == ob_type)]
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf[1:18]
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf[1:18]
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
#plot the outputs
autocorr_plot(obs = obs, data_name = ob_type, site = site,
sub_folder = subfolder)
}
# iterate and plot the outputs
site_num <- site_num + 1
# now take the averages and plot those
mean_pacf <- colMeans(do.call(rbind, all_sites_pacf), na.rm = TRUE)
ci <- 1.96*std_err(mean_pacf)
lags <- c(1:18)
# plot the partial averages
png(
paste0(
here::here(
"./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"pacf-mean-", datatype, "-", ob_type , ".png"))
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
# plot the regular averages
png(
paste0(
here::here(
"./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"acf-mean-", datatype, "-", ob_type, ".png"))
mean_acf <- colMeans(do.call(rbind, all_sites_acf), na.rm = TRUE)
ci <- 1.96*std_err(mean_acf)
lags <- c(1:18)
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf)+0.5*max(mean_acf)),
(max(mean_acf)+0.5*max(mean_acf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
}
dev.off()
# use some vectors to store the calculations across all sites so we can get
# an average across all sites
for(ob_type in unique(data$variable)) {
data_ob <- data[
which(data$variable == ob_type),
]
all_sites_pacf <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_acf <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_pacf_ci <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
all_sites_acf_ci <- vector(mode = "list", length =
length(unique(data_ob$site_id)))
site_num <- 1
# go through each site and get the values then plot them
for(site in unique(data_ob$site_id)) {
data_site <- data_ob[which(data_ob$site_id == site &
!is.na(data_ob$observation)), ]
# site by site plot
data_site_plot <- ggplot2::ggplot(data = data_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
ggplot2::labs(y = ob_type, x = "Time")
ggsave(paste0(
here::here("./figs/neon-data-timeseries/", subfolder, "/"),
datatype, ob_type, "-", site, ".png"),
data_site_plot)
obs<-data_site$observation[which(data_site$variable == ob_type)]
all_sites_pacf[[site_num]] <- pacf(obs, pl = FALSE)$acf[1:18]
all_sites_pacf_ci[[site_num]] <- get_clim(pacf(obs, pl = FALSE))
all_sites_acf[[site_num]] <- acf(obs, pl = FALSE)$acf[1:18]
all_sites_acf_ci[[site_num]] <- get_clim(acf(obs, pl = FALSE))
#plot the outputs
autocorr_plot(obs = obs, data_name = ob_type, site = site,
sub_folder = subfolder)
}
# iterate and plot the outputs
site_num <- site_num + 1
# now take the averages and plot those
mean_pacf <- colMeans(do.call(rbind, all_sites_pacf), na.rm = TRUE)
ci <- 1.96*std_err(mean_pacf)
lags <- c(1:18)
# plot the partial averages
png(
paste0(
here::here(
"./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"pacf-mean-", datatype, "-", ob_type , ".png"))
plot(x = lags, y = mean_pacf, type = "h",
ylim = c(-(max(mean_pacf)+0.5*max(mean_pacf)),
(max(mean_pacf)+0.5*max(mean_pacf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
# plot the regular averages
png(
paste0(
here::here(
"./figs/neon-autocorrelation-plots/mean-autocorrelation/"),
"acf-mean-", datatype, "-", ob_type, ".png"))
mean_acf <- colMeans(do.call(rbind, all_sites_acf), na.rm = TRUE)
ci <- 1.96*std_err(mean_acf)
lags <- c(1:18)
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf)+0.5*max(mean_acf)),
(max(mean_acf)+0.5*max(mean_acf))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
}
ci
lags
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf)+0.5*max(mean_acf)),
(max(mean_acf)+0.5*max(mean_acf))),
xlab = "Lags", ylab = "Mean PACF")
mean_acf <- colMeans(do.call(rbind, all_sites_acf), na.rm = TRUE)
ci <- 1.96*std_err(mean_acf)
lags <- c(1:18)
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf)+0.5*max(mean_acf)),
(max(mean_acf)+0.5*max(mean_acf))),
xlab = "Lags", ylab = "Mean PACF")
c(-(max(mean_acf)+0.5*max(mean_acf)),
(max(mean_acf)+0.5*max(mean_acf)))
max(mean_acf)
mean_acf
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf, na.rm = TRUE) +
0.5 * max(mean_acf, na.rm = TRUE)),
(max(mean_acf, na.rm = TRUE) +
0.5 * max(mean_acf, na.rm = TRUE))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
dev.off()
plot(x = lags, y = mean_acf, type = "h",
ylim = c(-(max(mean_acf, na.rm = TRUE) +
0.5 * max(mean_acf, na.rm = TRUE)),
(max(mean_acf, na.rm = TRUE) +
0.5 * max(mean_acf, na.rm = TRUE))),
xlab = "Lags", ylab = "Mean PACF")
abline(h = 0, col = "grey80", lty = 2)
abline(h = ci, col = "red2", lty = 2)
abline(h = -ci, col = "red2", lty = 2)
tar_make()
tar_make()
tar_make()
targets::tar_visnetwork()
library(magrittr)
library(ggplot2)
source(here::here("./src/R/functions_global.R"))
ticks <- readr::read_csv(here::here("./data/efi-neon-data/ticks.csv"))
site = "BLAN"
ticks_site <- ticks[which(ticks$site_id == site), ]
ticks_site_plot <- ggplot2::ggplot(data = ticks_site) +
ggplot2::geom_line(ggplot2::aes(x = datetime, y = observation)) +
ggplot2::geom_point(ggplot2::aes(x = datetime, y = observation),
size = 2, fill = "red3", shape = 21) +
theme_base() +
labs(y = "# of Ticks", x = "Time")
ticks_site_plot
ggsave(
paste0(here::here("./figs/neon-data-timeseries/ticks-by-site/"),
"ticks-", site, ".png"),
ticks_site_plot
)
obs <- ticks_site$observation
View(ticks_site)
# going to go through the process once iwth one of the datasets, so for now I'll
# just ues terrestrial-daily, for no particular reason
terr_daily <- readr::read_csv(
here::here("./data/efi-neon-data/terrestrial-daily.csv")
)
# just do this for one site
terr <- terr_daily[which(terr_daily$site_id == "BLAN"), ]
terr_daily_n <- nrow(terr)
rm(terr_daily_n)
# just do this for one site
terr <- terr_daily[which(terr_daily$site_id == "BLAN"), ]
terr_n <- nrow(terr)
View(terr)
# just do this for one site and one variable
terr <- terr_daily[which(terr_daily$site_id == "BLAN" &
terr_daily$variable == "le"), ]
terr_finite_prop <- sum(is.finite(terr$observation))/terr_n
is.finite(terr$observation)
count(is.finite(terr$observation)
)
sum(is.finite(terr$observation)
)
terr_n <- nrow(terr)
terr_finite_prop <- sum(is.finite(terr$observation)/terr_n
l
terr_finite_prop <- sum(is.finite(terr$observation))/terr_n
terr_finite_prop <- sum(is.finite(terr$observation))/terr_n
remotes::install_github("anthonynorth/rscodeio")
install.packages("remotes")
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
terr_finite_prop <- sum(is.finite(terr$observation))/terr_n
terr_zeros <- nrow(terr[which(terr$observation == 0),])
sum(terr$observation==0)
terr_ties_prop <- sum(terr$observation==0)/terr_n
terr_n_gaps <- sum(abs(diff(terr$datetime)) >= 2)
abs(diff(terr$datetime))
View(terr)
sum(abs(diff(terr$datetime)) >= 2)
diff(terr$datetime)
View(terr)
terr_daily <- readr::read_csv(
here::here("./data/efi-neon-data/terrestrial-daily.csv")
)
# just do this for one site and one variable
terr <- terr_daily[which(terr_daily$site_id == "BLAN" &
terr_daily$variable == "le"), ]
terr_n <- nrow(terr)
terr_finite_prop <- sum(is.finite(terr$observation))/terr_n
terr_zeros <- nrow(terr[which(terr$observation == 0),])
terr_ties_prop <- sum(terr$observation==0)/terr_n
terr_n_gaps <- sum(abs(diff(terr$datetime)) >= 2)
View(terr)
source(here::here("./src/R/functions_global.R"))
library(ggplot2)
terr
# for demonstration purposes, make a plot that shows the locations of missing
# observations along with the data
ggplot(data = terr) +
geom_point(aes(x = datetime, y = observation)) +
labs(x = "time", y = "le")
# for demonstration purposes, make a plot that shows the locations of missing
# observations along with the data
ggplot(data = terr) +
geom_point(aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
theme_base()
# for demonstration purposes, make a plot that shows the locations of missing
# observations along with the data
terr_comp <- terr %>%
tidyr::complete(datetime)
library(magrittr)
# for demonstration purposes, make a plot that shows the locations of missing
# observations along with the data
terr_comp <- terr %>%
tidyr::complete(datetime)
# for demonstration purposes, make a plot that shows the locations of missing
# observations along with the data
terr_comp <- data.frame(
datetime = seq(as.Date(min(terr$datetime)), as.Date(max(terr$datetime)),
by = "days")
)
# for demonstration purposes, make a plot that shows the locations of missing
# observations along with the data
terr_comp <- data.frame(
datetime = seq(as.Date(min(terr$datetime)), as.Date(max(terr$datetime)),
by = "days")
) %>%
dplyr::left_join(
.,
y = terr,
by = "datetime"
)
ggplot() +
geom_point(data = terr,
aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
theme_base()
ggplot() +
geom_point(data = terr_comp,
aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
theme_base()
View(terr_comp)
ggplot() +
geom_point(data = terr_comp,
aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
geom_col(data = terr_comp[which(is.na(terr_comp$observation)),],
aes = datetime, y = 200)
aes(x = datetime, y = 200)
ggplot() +
geom_point(data = terr_comp,
aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
geom_col(data = terr_comp[which(is.na(terr_comp$observation)),],
aes(x = datetime, y = 200)) +
theme_base()
ggplot() +
geom_col(data = terr_comp[which(is.na(terr_comp$observation)),],
aes(x = datetime, y = 200)) +
geom_point(data = terr_comp,
aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
theme_base()
ggplot() +
geom_col(data = terr_comp[which(is.na(terr_comp$observation)),],
aes(x = datetime, y = 200),
alpha = 0.2, colour = "lightblue") +
geom_point(data = terr_comp,
aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
theme_base()
ggsave(
here::here("./figs/manually-generated/terr-daily-missing-obs-blan-le.png"),
missing_blan_le
)
missing_blan_le <- ggplot() +
geom_col(data = terr_comp[which(is.na(terr_comp$observation)),],
aes(x = datetime, y = 200),
alpha = 0.2, colour = "lightblue") +
geom_point(data = terr_comp,
aes(x = datetime, y = observation)) +
labs(x = "time", y = "le") +
theme_base()
ggsave(
here::here("./figs/manually-generated/terr-daily-missing-obs-blan-le.png"),
missing_blan_le
)
